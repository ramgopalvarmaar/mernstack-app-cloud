#!/usr/bin/env node

/* The below four line To deal with env variable thats already set in the machine - sometime my local machine is taking AWS kyes and secret keys something else than what is set in the .env file

https://github.com/motdotla/dotenv#what-happens-to-environment-variables-that-were-already-set
"We will never modify any environment variables that have already been set. In particular, if there is a variable in your .env file which collides with one that already exists in your environment, then that variable will be skipped. This behavior allows you to override all .env configurations with a machine-specific environment, although it is not recommended."
 */
// require("dotenv").config();
const fs = require("fs");
// const dotenv = require("dotenv");
require('dotenv').config()
// const envConfig = dotenv.parse(fs.readFileSync(".env.override"));
// for (let k in envConfig) {
//   process.env[k] = envConfig[k];
// }

// require('dotenv').config();
var app = require('../app');
var debug = require('debug')('mean-app:server');
var http = require('http');
// const path = require("path");

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);


// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}


// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    console.log(error);
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
    console.log(error);
  }
}


// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
